1. Explain the different types of containers available in the standard library, what are their differences?
	 Explain use cases for each.
	Answer: There are 3 kinds of STL containers:
		-Sequential Containers 
		-Associative Containers
		-Unordered Associative Containers
		
		*Sequential Containers: implement data structures that can be accessed sequentially.
			-array: Static contiguous array (class template)
			-vector: Dynamic contiguous array (class template)
			-deque: Double-ended queue (class template)
			-forward_list: Singly-linked list (class template)
			-list: Doubly-linked list (class template)
			
		*Associative Containers: implement sorted data structures that can be quickly searched (O(log n) complexity).
			-set: Collection of unique keys, sorted by keys (class template)
			-map: Collection of key-value pairs, sorted by keys, keys are unique (class template).
			-multiset: Collection of keys, sorted by keys (class template)
			-multimap: Collection of key-value pairs, sorted by keys (class template)
			
		*Unordered Associative Containers: implement unsorted (hashed) data structures that can be quickly searched
			(O(1) amortized, O(n) worst-case complexity).
			-unordered_set: Collection of unique keys, hashed by keys. (class template)
			-unordered_map: Collection of key-value pairs, hashed by keys, keys are unique. (class template)
			-unordered_multiset: Collection of keys, hashed by keys (class template)
			-unordered_multimap: Collection of key-value pairs, hashed by keys (class template)

2. What are some sorting algorithms, list at least 3? What are their differences and give use cases for each.
	Answer: A Sorting Algorithm is used to rearrange a given array or list of elements according to a comparison
		operator on the elements. The comparison operator is used to decide the new order of elements in the
		respective data structure. There is differences about the time complexity and space complexity, what
		is represented by the BigO Notation.
		The types of complexity are: Best Time Complexity, Average Time Complexity and Worst Time Complexity.
		Some examples of sorting algorythms are:
			* Selection Sort
			* Bubble Sort
			* Recursive Bubble Sort
			* Insertion Sort
			* Recursive Insertion Sort
			* Merge Sort
			* Iterative Merge Sort
			* Quick Sort
			* Iterative Quick Sort
			* Heap Sort
			* (there is much more...)
			There are examples in the folder 'sorting/'.

3. What is the purpose of virtual destructors? What types of issues can arise if not used correctly.
	Answer: Deleting a derived class object using a pointer of base class type that has a non-virtual
		destructor results in undefined behavior.
		To correct this situation, the base class should be defined with a virtual destructor.
		Examples of use in the files virtual_destructor_wrong.cpp and virtual_destructor_correct.cpp

4. Explain the keyword: static. What does it mean in each context?
	Answer: Static keyword has different meanings when used with different types.
		We can use static keyword with:
			- Static Variables : Variables in a function, Variables in a class
			- Static Members of Class : Class objects and Functions in a class

			Static Variables

			* Static variables in a Function: When a variable is declared as static,
				space for it gets allocated for the lifetime of the program. Even if the function is
				called multiple times, space for the static variable is allocated only once and the value
				of variable in the previous call gets carried through the next function call. This is
				useful for implementing coroutines in C/C++ or any other application where previous state
				of function needs to be stored.
			* Static variables in a class: As the variables declared as static are initialized only once
				as they are allocated space in separate static storage so, the static variables in a class
				are shared by the objects. There can not be multiple copies of same static variables for
				different objects. Also because of this reason static variables can not be initialized using
				constructors.

			Static Members of Class

			* Class objects as static: Just like variables, objects also when declared as static have a
				scope till the lifetime of program.
			* Static functions in a class: Just like the static data members or static variables inside
				the class, static member functions also does not depend on object of class. We are allowed
				to invoke a static member function using the object and the ‘.’ operator but it is recommended
				to invoke the static members using the class name and the scope resolution operator.

			Static member functions are allowed to access only the static data members or other static member
			functions, they can not access the non-static data members or member functions of the class.

5. When are static member variables initialized?
	Answer: The static class member variables are initialized to zero when the first object of the class is
		created if they are not initialized in any other way.

6. What is the difference between R-Values and L-Values?
	Answer: r-value simply means, an object that has no identifiable location in memory (i.e. having an address).
	
		l-value simply means an object that has an identifiable location in memory (i.e. having an address).
		In any assignment statement “lvalue” must have the capability to store the data.
		lvalue cannot be a function, expression (like a+b) or a constant (like 3 , 4 , etc.).

7. Is this code safe? If so why? If not why?
	std::string foo()
	{
		std::string something = "avalue";
		return something;
	}
	
	Answer: Yes. An local object is created and a copy is returned to the caller.
	
	Bonus: What would most compilers do with this code?
	
	Answer: Following the Return Value Optimization rule, the copy will be ommited and the creation of the object will be made
		directly in the return statement.

		In the context of the C++ programming language, return value optimization (RVO) is a compiler optimization that involves
		eliminating the temporary object created to hold a function's return value. RVO is allowed to change the observable
		behaviour of the resulting program by the C++ standard.
	
8. Why would you use new rather than malloc when allocating an object? Likewise, what's the difference between free and delete?
	Answer: The 'new' keyword calls the constructor function of a class whereas 'malloc' keyword doesn't. The same way, the 'free' keyword doesn't call the 		destructor of the class while the 'delete' keyword does.
		'malloc' and 'free' are C functions that are compatible with C++ code while 'new' and 'delete' are speficic C++ functions.
	
9. Explain the purpose of std::move, and std::forward. 
	Answer: std::move is used to convert an lvalue reference to an rvalue reference, often to transfer the resources held by one lvalue to another.
		std::forward is used to distinguish between lvalue and rvalue references, often in the case where a parameter of type rvalue reference is deduced to be
		an lvalue.
	
10. How do you share resources safely between threads? How would you share an integer value vs user defined type? 

11. What are the some of the principles of object-oriented programming?
	Answer: Object-oriented programming has four basic concepts: encapsulation, abstraction, inheritance and polymorphism.
	
12. Explain inheritance vs composition vs aggregation?

13. Should you always initialize variables? 

14. What concept(s) in C++ would you use to manage resources automatically?
	a. How important are these concepts? 	
	b. What tools are you familiar with for tracking resource allocations? 
	
15. What security concerns have you come across in the past and how have you addressed them?

16. Name some tools and/or techniques that you personally find to be the most helpful surrounding development.

17. Name some tools and/or techniques that you personally find to be the most helpful surrounding code maintenance. 

18. Scenario: You are dealing with legacy code containing no test suites nor documented requirements, and are required to make a change. Describe your expected process for how you may approach the solution. 
	a. Consider both a long term and short-term solutions. 
	
19. What concerns do you had supporting legacy operating systems? (If any)

20. Tell us about a project you worked on that you found to be interesting or unusual. 
